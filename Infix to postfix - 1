#include <stdio.h>
#include <stdlib.h>
#define SIZE 50

char Expr[] = {
    'x', '^', 'y', '/', '(', 's', '*', '3', ')', '+', '2'
};

char Stack[SIZE];
int Top = -1;
int m = 0;
int l = sizeof(Expr) / sizeof(Expr[0]);  // Length of expression

void push(char ch);
void pop();
void infix_to_postfix();

void main() {
    printf("Infix Expression: x^y/(s*3)+2\n");
    printf("Postfix Expression: ");
    infix_to_postfix();
    printf("\n");
}

void push(char ch) {
    if (Top + 1 >= SIZE) {
        printf("\nStack is full");
    } else {
        Stack[++Top] = ch;
    }
}

void pop() {
    if (Top < 0) {
        printf("\nStack is empty");
    } else {
        if (Stack[Top] != '(')
            printf("%c", Stack[Top]);
        Top--;
    }
}

void infix_to_postfix() {
    m = 0;
    while (m < l) {
        switch (Expr[m]) {
            case '+':
            case '-':
                while ((Stack[Top] == '-' || Stack[Top] == '+' || Stack[Top] == '*' ||
                        Stack[Top] == '/' || Stack[Top] == '^') &&
                       Stack[Top] != '(')
                    pop();
                push(Expr[m]);
                m++;
                break;

            case '*':
            case '/':
                while ((Stack[Top] == '*' || Stack[Top] == '/' || Stack[Top] == '^') &&
                       Stack[Top] != '(')
                    pop();
                push(Expr[m]);
                m++;
                break;

            case '^':
                push(Expr[m]);
                m++;
                break;

            case '(':
                push(Expr[m]);
                m++;
                break;

            case ')':
                while (Stack[Top] != '(')
                    pop();
                Top--;  // Remove '('
                m++;
                break;

            default:
                // No condition check â€” assume all non-operators are operands
                printf("%c", Expr[m]);
                m++;
                break;
        }
    }

    while (Top >= 0)
        pop();
}




OUTPUT:
Infix Expression: x^y/(s*3)+2
Postfix Expression: xy^s3*/2+

